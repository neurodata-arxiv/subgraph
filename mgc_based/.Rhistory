knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/',
echo=T, warning=FALSE, message=FALSE)
require('igraph')
require('ggplot2')
require('reshape')
# require('lsr')
source("MGCSampleStat.R")
source("MGCPermutationTest.R")
require("ggplot2")
require("fields")
setwd("~/git/subgraph/mgc_based/")
listGs<- list.files(path = "../graphml/", pattern = "*.graphml")
#read in covariates and graph list
#find those with common ids, sort by id
covariates<- read.csv("../covariates/predictors.csv",stringsAsFactors = F)
ids <- unlist( lapply(listGs,function(x)strtrim(x,6)))
common_id<- intersect(covariates$RUNNO , ids)
covariates <- covariates[covariates$RUNNO%in%common_id,]
covariates <- covariates[order(covariates$RUNNO),]
listGs<- listGs[ids%in%common_id]
listGs<- listGs[order(listGs)]
graphList<- lapply(listGs, function(x){
read.graph( file = paste("../graphml/",x,sep = ""),format = "graphml")
})
AdjacencyList<- lapply(graphList, function(x){
get.adjacency(x)
})
HemisphereList<- lapply(graphList, function(x){
get.vertex.attribute(x,name="hemisphere")
})
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
n = nrow(AdjacencyList[[1]])
########################
## Compute all local corr
library(ecodist)
library(energy)
library(HHG)
source("MGCLocalCorr.R")
source("MGCSampleStat.R")
LowerTriMatrix = sapply(AdjacencyList,function(x){
x = as.matrix(x)
x[lower.tri(x)]
})
AdjMatrix = t(LowerTriMatrix[,covariates$GENOTYPE>=1])
GenoType = covariates$GENOTYPE[covariates$GENOTYPE>=1]
Gender = covariates$GENDER[covariates$GENOTYPE>=1]
A = as.matrix(dist(AdjMatrix))
B = as.matrix(dist(GenoType))
C = as.matrix(dist(Gender))
m = nrow(A)
distVertex <- lapply( c(1:n),function(i){
AdjVec = LowerTriMatrix = sapply(AdjacencyList,function(x){
x = as.matrix(x)
x[,i]
})
subsetMat = t(AdjVec[,covariates$GENOTYPE>=1])
A = as.matrix(dist(subsetMat))
A
})
mgc_result = sapply(distVertex, function(x) {MGCSampleStat(x,B)})
local_result=  sapply(distVertex, function(x) {
MGCLocalCorr(x,B,option='mcor')$corr[m,1]
})
local_result=  sapply(distVertex, function(x) {
lCor = MGCLocalCorr(x,B,option='mcor')$corr
lCor[nrow(lCor),1]
})
local_result
require('igraph')
require('ggplot2')
require('reshape')
# require('lsr')
source("MGCSampleStat.R")
source("MGCPermutationTest.R")
require("ggplot2")
require("fields")
setwd("~/git/subgraph/mgc_based/")
options(max.print=100)
listGs<- list.files(path = "../graphml/", pattern = "*.graphml")
#read in covariates and graph list
#find those with common ids, sort by id
covariates<- read.csv("../covariates/predictors.csv",stringsAsFactors = F)
ids <- unlist( lapply(listGs,function(x)strtrim(x,6)))
common_id<- intersect(covariates$RUNNO , ids)
covariates <- covariates[covariates$RUNNO%in%common_id,]
covariates <- covariates[order(covariates$RUNNO),]
listGs<- listGs[ids%in%common_id]
listGs<- listGs[order(listGs)]
graphList<- lapply(listGs, function(x){
read.graph( file = paste("../graphml/",x,sep = ""),format = "graphml")
})
AdjacencyList<- lapply(graphList, function(x){
get.adjacency(x)
})
HemisphereList<- lapply(graphList, function(x){
get.vertex.attribute(x,name="hemisphere")
})
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
n = nrow(AdjacencyList[[1]])
####
image(AdjacencyList[[1]])
image(AdjacencyList[[1]])
image(AdjacencyLst[[1]])
image(AdjacencyList[[1]])
image(AdjacencyList[[2]])
image(AdjacencyList[[1]])
image(AdjacencyList[[2]])
image(AdjacencyList[[1]])
image(AdjacencyList[[2]])
image(AdjacencyList[[3]])
image(AdjacencyList[[1]])
image(AdjacencyList[[2]])
image(AdjacencyList[[1]])
image(AdjacencyList[[2]])
covariates$GENOTYPE
AdjMatrix = t(LowerTriMatrix[,covariates$GENOTYPE>=1])
covariates$GENOTYPE>=1
AdjacencyListPick =  list()
AdjacencyListPick =  list()
for(i in 1:length(AdjacencyList)){
if(covariates$GENOTYPE[i]>=1){
AdjacencyListPick[[length(AdjacencyListPick)+1]] = AdjacencyList[[i]]
}
}
length(AdjacencyListPick)
image(AdjacencyListPick)
image(AdjacencyListPick[[13]])
image(AdjacencyListPick[[13]])
image(AdjacencyListPick[[14]])
image(AdjacencyListPick[[1]])
image(AdjacencyListPick[[2]])
image(AdjacencyListPick[[3]])
image(AdjacencyListPick[[1]])
image(AdjacencyListPick[[2]])
image(AdjacencyListPick[[3]])
GENOTYPEPick = covariates$GENOTYPE[covariates$GENOTYPE[i]>=1]
GENOTYPEPick[[1]]
GENOTYPEPick[[2]]
GENOTYPEPick[[3]]
GENOTYPEPick = covariates$GENOTYPE[covariates$GENOTYPE>=1]
GENOTYPEPick[1]
GENOTYPEPick[2]
GENOTYPEPick[3]
image(AdjacencyListPick[[1]])
image(AdjacencyListPick[[2]])
image(AdjacencyListPick[[3]])
m = length(GENOTYPEPick)
m
GENOTYPEPick
c(1:m) == GENOTYPEPick == 1
c(1:m)[GENOTYPEPick == 1]
image(AdjacencyListPick[[1]])
image(AdjacencyListPick[[2]])
image(AdjacencyListPick[[3]])
image(AdjacencyListPick[[13]])
image(AdjacencyListPick[[14]])
geno1 = c(1:m)[GENOTYPEPick == 1]
for(i in 1:geno1){
image(AdjacencyListPick[[i]],main=i)
}
geno1
length(AdjacencyListPick)
for(i in geno1){
image(AdjacencyListPick[[i]],main=i)
}
for(i in geno1){
image(AdjacencyListPick[[i]],main=i)
}
title(main=i)
for(i in geno1){
image(AdjacencyListPick[[i]])
title(main=i)
}
dev.off()
for(i in geno1){
image(AdjacencyListPick[[i]],main=i)
}
install.packages("rmarkdown")
install.packages("rmarkdown")
