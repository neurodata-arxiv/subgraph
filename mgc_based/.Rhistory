setwd("~/git/subgraph/mgc_based/")
require('igraph')
require('ggplot2')
require('reshape')
setwd("~/git/subgraph/mgc_based/")
listGs<- list.files(path = "../graphml/", pattern = "*.graphml")
covariates<- read.csv("../covariates/predictors.csv",stringsAsFactors = F)
ids <- unlist( lapply(listGs,function(x)strtrim(x,6)))
common_id<- intersect(covariates$RUNNO , ids)
covariates <- covariates[covariates$RUNNO%in%common_id,]
covariates <- covariates[order(covariates$RUNNO),]
listGs<- listGs[ids%in%common_id]
listGs<- listGs[order(listGs)]
graphList<- lapply(listGs, function(x){
read.graph( file = paste("../graphml/",x,sep = ""),format = "graphml")
})
AdjacencyList<- lapply(graphList, function(x){
get.adjacency(x)
})
HemisphereList<- lapply(graphList, function(x){
get.vertex.attribute(x,name="hemisphere")
})
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
n = nrow(AdjacencyList[[1]])
library(ecodist)
library(energy)
library(HHG)
source("MGCLocalCorr.R")
source("./MGCSampleStat.R")
LowerTriMatrix = sapply(AdjacencyList,function(x){
x = as.matrix(x)
x[lower.tri(x)]
})
AdjMatrix = t(LowerTriMatrix[,covariates$GENOTYPE>=1])
GenoType = covariates$GENOTYPE[covariates$GENOTYPE>=1]
A = as.matrix(dist(AdjMatrix))
B = as.matrix(dist(GenoType))
GenoType
orderByGenotype = order(GenoType)
image(A[orderByGenotype,orderByGenotype])
image(A[orderByGenotype,orderByGenotype])
image(B[orderByGenotype,orderByGenotype])
image(A[orderByGenotype,orderByGenotype])
image(B[orderByGenotype,orderByGenotype])
image(A[orderByGenotype,orderByGenotype])
image(B[orderByGenotype,orderByGenotype])
image(A[orderByGenotype,orderByGenotype])
image(B[orderByGenotype,orderByGenotype])
Gender = covariates$GENDER[covariates$GENOTYPE>=1]
C = as.matrix(dist(Gender))
image(A[orderByGenotype,orderByGenotype])
image(B[orderByGenotype,orderByGenotype])
image(C[orderByGenotype,orderByGenotype])
orderByGenotype = order(Gender)
orderByGender = order(Gender)
image(A[orderByGender,orderByGender])
image(B[orderByGender,orderByGender])
image(C[orderByGender,orderByGender])
image(B[orderByGender,orderByGender])
image(A[orderByGender,orderByGender])
image(C[orderByGender,orderByGender])
image(A[orderByGender,orderByGender])
mgc_result = MGCSampleStat(A,B)
mgc_result
image(C[orderByGender,orderByGender])
image(A[orderByGender,orderByGender])
image(C[orderByGender,orderByGender])
mgc_result = MGCSampleStat(A,C)
mgc_result
MGCLocalCorr(A,C,option='mcor')$corr
source("MGCSampleStat.R")
source("MGCPermutationTest.R")
source("MGCSampleStat.R")
permuate_test = MGCPermutationTest(A,B,rep=1000,option='mcor')
permuate_test = MGCPermutationTest(A,B,rep=1000,option='mcor')
permuate_test = MGCPermutationTest(A,C,rep=1000,option='mcor')
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/',
echo=T, warning=FALSE, message=FALSE)
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/',
echo=T, warning=FALSE, message=FALSE)
require('igraph')
require('ggplot2')
require('reshape')
# require('lsr')
source("MGCSampleStat.R")
source("MGCPermutationTest.R")
require("ggplot2")
require("fields")
setwd("~/git/subgraph/mgc_based/")
listGs<- list.files(path = "../graphml/", pattern = "*.graphml")
#read in covariates and graph list
#find those with common ids, sort by id
covariates<- read.csv("../covariates/predictors.csv",stringsAsFactors = F)
ids <- unlist( lapply(listGs,function(x)strtrim(x,6)))
common_id<- intersect(covariates$RUNNO , ids)
covariates <- covariates[covariates$RUNNO%in%common_id,]
covariates <- covariates[order(covariates$RUNNO),]
listGs<- listGs[ids%in%common_id]
listGs<- listGs[order(listGs)]
graphList<- lapply(listGs, function(x){
read.graph( file = paste("../graphml/",x,sep = ""),format = "graphml")
})
AdjacencyList<- lapply(graphList, function(x){
get.adjacency(x)
})
HemisphereList<- lapply(graphList, function(x){
get.vertex.attribute(x,name="hemisphere")
})
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
n = nrow(AdjacencyList[[1]])
########################
## Compute all local corr
library(ecodist)
library(energy)
library(HHG)
source("MGCLocalCorr.R")
source("MGCSampleStat.R")
LowerTriMatrix = sapply(AdjacencyList,function(x){
x = as.matrix(x)
x[lower.tri(x)]
})
AdjMatrix = t(LowerTriMatrix[,covariates$GENOTYPE>=1])
GenoType = covariates$GENOTYPE[covariates$GENOTYPE>=1]
Gender = covariates$GENDER[covariates$GENOTYPE>=1]
A = as.matrix(dist(AdjMatrix))
B = as.matrix(dist(GenoType))
C = as.matrix(dist(Gender))
m = nrow(A)
distVertex <- lapply( c(1:n),function(i){
AdjVec = LowerTriMatrix = sapply(AdjacencyList,function(x){
x = as.matrix(x)
x[,i]
})
subsetMat = t(AdjVec[,covariates$GENOTYPE>=1])
A = as.matrix(dist(subsetMat))
A
})
distVertex <- lapply( c(1:n),function(i){
AdjVec = LowerTriMatrix = sapply(AdjacencyList,function(x){
x = as.matrix(x)
x[,i]
})
subsetMat = t(AdjVec[,covariates$GENOTYPE>=1])
A = as.matrix(dist(subsetMat))
A
})
load(file= "genotype_vertex_list.RDa")
df = data.frame( "value"= c(genotype_vertex_list$mgc_result, genotype_vertex_list$perm_result, genotype_vertex_list$local_result), "vertex"= rep(c(1:n),3),"metric"=as.factor(rep(c("mgc","perm.p.value","local"),each=n)))
ggplot(df, aes(x=vertex, y=value)) +  geom_point(shape=1)+facet_grid(metric~.)
ggplot(df, aes(x=vertex, y=value)) +  geom_point(shape=1)+facet_grid(metric~., scales="free")
ggplot(df, aes(x=vertex, y=value)) +  geom_point(shape=1)+facet_grid(metric~., scales="free_y")
genotype_vertex_list$local_result
load(file= "gender_vertex_list.RDa")
df = data.frame( "value"= c(gender_vertex_list$mgc_result, gender_vertex_list$perm_result, gender_vertex_list$local_result), "vertex"= rep(c(1:n),3),"metric"=as.factor(rep(c("mgc","perm.p.value","local"),each=n)))
ggplot(df, aes(x=vertex, y=value)) +  geom_point(shape=1)+facet_grid(metric~., scales="free_y")
