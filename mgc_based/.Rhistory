common_id<- intersect(covariates$RUNNO , ids)
covariates <- covariates[covariates$RUNNO%in%common_id,]
covariates <- covariates[order(covariates$RUNNO),]
listGs<- listGs[ids%in%common_id]
listGs<- listGs[order(listGs)]
graphList<- lapply(listGs, function(x){
read.graph( file = paste("../graphml/",x,sep = ""),format = "graphml")
})
AdjacencyList<- lapply(graphList, function(x){
get.adjacency(x)
})
n = nrow(AdjacencyList[[1]])
half = c(1:(n/2))
reordered = c( half*2-1,half*2)
AdjacencyList<- lapply(AdjacencyList, function(x){
x[reordered,reordered]
})
HemisphereList<- lapply(graphList, function(x){
get.vertex.attribute(x,name="hemisphere")
})
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
####
AdjacencyListPick =  list()
for(i in 1:length(AdjacencyList)){
if(covariates$GENOTYPE[i]>=1){
AdjacencyListPick[[length(AdjacencyListPick)+1]] = AdjacencyList[[i]]
}
}
GENOTYPEPick = covariates$GENOTYPE[covariates$GENOTYPE>=1]
m = length(GENOTYPEPick)
SEXPick = covariates$GENDER[covariates$GENOTYPE>=1]
GENOTYPEPick
GENOTYPEPick
SEXPick
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
DegreeListMat = do.call("cbind", DegreeList)
DegreeListPick = DegreeListMat[,covariates$GENOTYPE>=1]
df = data.frame("degree"= c(DegreeListPick), "id"= as.factor(rep(c(1:m),each=n)),"genotype"= as.factor(rep(GENOTYPEPick,each=n)),"sex"=as.factor(SEXPick,each=n))
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/',
echo=F, warning=FALSE, message=FALSE)
setwd("~/git/subgraph/mgc_based/")
require('igraph')
require('ggplot2')
require('fields')
options(max.print=100)
listGs<- list.files(path = "../graphml/", pattern = "*.graphml")
#read in covariates and graph list
#find those with common ids, sort by id
covariates<- read.csv("../covariates/predictors.csv",stringsAsFactors = F)
ids <- unlist( lapply(listGs,function(x)strtrim(x,6)))
common_id<- intersect(covariates$RUNNO , ids)
covariates <- covariates[covariates$RUNNO%in%common_id,]
covariates <- covariates[order(covariates$RUNNO),]
listGs<- listGs[ids%in%common_id]
listGs<- listGs[order(listGs)]
graphList<- lapply(listGs, function(x){
read.graph( file = paste("../graphml/",x,sep = ""),format = "graphml")
})
AdjacencyList<- lapply(graphList, function(x){
get.adjacency(x)
})
n = nrow(AdjacencyList[[1]])
half = c(1:(n/2))
reordered = c( half*2-1,half*2)
AdjacencyList<- lapply(AdjacencyList, function(x){
x[reordered,reordered]
})
HemisphereList<- lapply(graphList, function(x){
get.vertex.attribute(x,name="hemisphere")
})
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
####
AdjacencyListPick =  list()
for(i in 1:length(AdjacencyList)){
if(covariates$GENOTYPE[i]>=1){
AdjacencyListPick[[length(AdjacencyListPick)+1]] = AdjacencyList[[i]]
}
}
GENOTYPEPick = covariates$GENOTYPE[covariates$GENOTYPE>=1]
SEXPick = covariates$GENDER[covariates$GENOTYPE>=1]
m = length(GENOTYPEPick)
#genotype 1
geno1 = c(1:m)[GENOTYPEPick == 1]
par(mfrow=c(1,2))
for(i in geno1){
img = 1-as.matrix(AdjacencyListPick[[i]])
image(img, col  = gray((0:32)/32),main=i)
}
#genotype 2
geno2 = c(1:m)[GENOTYPEPick == 2]
par(mfrow=c(1,2))
for(i in geno2){
img = 1-as.matrix(AdjacencyListPick[[i]])
image(img, col  = gray((0:32)/32),main=i)
}
Asum = matrix(0, n,n)
for(i in geno1){
Asum = Asum + as.matrix(AdjacencyListPick[[i]])
}
avgGeno1 = Asum/length(geno1)
image.plot(avgGeno1)
Asum = matrix(0, n,n)
for(i in geno2){
Asum = Asum + as.matrix(AdjacencyListPick[[i]])
}
avgGeno2 = Asum/length(geno2)
image.plot(avgGeno2)
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
DegreeListMat = do.call("cbind", DegreeList)
DegreeListPick = DegreeListMat[,covariates$GENOTYPE>=1]
df = data.frame("degree"= c(DegreeListPick), "id"= as.factor(rep(c(1:m),each=n)),"genotype"= as.factor(rep(GENOTYPEPick,each=n)),"sex"=as.factor(SEXPick,each=n))
df = data.frame("degree"= c(DegreeListPick), "id"= as.factor(rep(c(1:m),each=n)),"genotype"= as.factor(rep(GENOTYPEPick,each=n)),"sex"=as.factor(rep(SEXPick,each=n)))
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
DegreeListMat = do.call("cbind", DegreeList)
DegreeListPick = DegreeListMat[,covariates$GENOTYPE>=1]
df = data.frame("degree"= c(DegreeListPick), "id"= as.factor(rep(c(1:m),each=n)),"genotype"= as.factor(rep(GENOTYPEPick,each=n)),"sex"=as.factor(rep(SEXPick,each=n)))
ggplot(data=df, aes(degree,fill=id))+ geom_histogram(bins = 30,position = "identity",alpha=0.5)+ theme_bw()+facet_grid(~genotype)
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
DegreeListMat = do.call("cbind", DegreeList)
DegreeListPick = DegreeListMat[,covariates$GENOTYPE>=1]
df = data.frame("degree"= c(DegreeListPick), "id"= as.factor(rep(c(1:m),each=n)),"genotype"= as.factor(rep(GENOTYPEPick,each=n)),"sex"=as.factor(rep(SEXPick,each=n)))
ggplot(data=df, aes(degree,fill=id))+ geom_histogram(bins = 30,position = "identity",alpha=0.5)+ theme_bw()+facet_grid(~genotype)
ggplot(data=df, aes(degree,fill=id))+ geom_histogram(bins = 30,position = "identity",alpha=0.5)+ theme_bw()+facet_grid(~gender)
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
DegreeListMat = do.call("cbind", DegreeList)
DegreeListPick = DegreeListMat[,covariates$GENOTYPE>=1]
df = data.frame("degree"= c(DegreeListPick), "id"= as.factor(rep(c(1:m),each=n)),"genotype"= as.factor(rep(GENOTYPEPick,each=n)),"sex"=as.factor(rep(SEXPick,each=n)))
ggplot(data=df, aes(degree,fill=id))+ geom_histogram(bins = 30,position = "identity",alpha=0.5)+ theme_bw()+facet_grid(~genotype)
ggplot(data=df, aes(degree,fill=id))+ geom_histogram(bins = 30,position = "identity",alpha=0.5)+ theme_bw()+facet_grid(~sex)
DegreeList<- lapply(graphList, function(x){
betweenness(x)
})
DegreeListMat = do.call("cbind", DegreeList)
DegreeListPick = DegreeListMat[,covariates$GENOTYPE>=1]
df = data.frame("betweenness"= c(DegreeListPick), "id"= as.factor(rep(c(1:m),each=n)),"genotype"= as.factor(rep(GENOTYPEPick,each=n)))
ggplot(data=df, aes(betweenness,fill=id))+ geom_histogram(bins = 30,position = "identity",alpha=0.5)+ theme_bw()+facet_grid(~genotype)
DegreeList<- lapply(graphList, function(x){
betweenness(x)
})
DegreeListMat = do.call("cbind", DegreeList)
DegreeListPick = DegreeListMat[,covariates$GENOTYPE>=1]
df = data.frame("betweenness"= c(DegreeListPick), "id"= as.factor(rep(c(1:m),each=n)),"genotype"= as.factor(rep(GENOTYPEPick,each=n)),"sex"=as.factor(rep(SEXPick,each=n)))
ggplot(data=df, aes(betweenness,fill=id))+ geom_histogram(bins = 30,position = "identity",alpha=0.5)+ theme_bw()+facet_grid(~genotype)
ggplot(data=df, aes(betweenness,fill=id))+ geom_histogram(bins = 30,position = "identity",alpha=0.5)+ theme_bw()+facet_grid(~sex)
par(mfrow=c(1,2))
for(i in geno1){
img = as.matrix(LRSumList[[i]])
image.plot(img,main=i, zlim=c(0,7000))
}
left_idx = c(1: (n/2))
right_idx = c((n/2+1):n)
LRSumList = lapply( AdjacencyListPick, function(x){
A = matrix(0,2,2)
A[1,1] = sum(x[left_idx,left_idx])
A[1,2] = sum(x[left_idx,right_idx])
A[2,2] = sum(x[right_idx,right_idx])
A[2,1] = A[1,2]
A
})
par(mfrow=c(1,2))
for(i in geno1){
img = as.matrix(LRSumList[[i]])
image.plot(img,main=i, zlim=c(0,7000))
}
source('~/.active-rstudio-document', echo=TRUE)
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/',
echo=F, warning=FALSE, message=FALSE)
setwd("~/git/subgraph/mgc_based/")
require('igraph')
require('ggplot2')
require('fields')
options(max.print=100)
listGs<- list.files(path = "../graphml/", pattern = "*.graphml")
#read in covariates and graph list
#find those with common ids, sort by id
covariates<- read.csv("../covariates/predictors.csv",stringsAsFactors = F)
ids <- unlist( lapply(listGs,function(x)strtrim(x,6)))
common_id<- intersect(covariates$RUNNO , ids)
covariates <- covariates[covariates$RUNNO%in%common_id,]
covariates <- covariates[order(covariates$RUNNO),]
listGs<- listGs[ids%in%common_id]
listGs<- listGs[order(listGs)]
graphList<- lapply(listGs, function(x){
read.graph( file = paste("../graphml/",x,sep = ""),format = "graphml")
})
AdjacencyList<- lapply(graphList, function(x){
get.adjacency(x)
})
n = nrow(AdjacencyList[[1]])
half = c(1:(n/2))
reordered = c( half*2-1,half*2)
AdjacencyList<- lapply(AdjacencyList, function(x){
x[reordered,reordered]
})
HemisphereList<- lapply(graphList, function(x){
get.vertex.attribute(x,name="hemisphere")
})
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
####
AdjacencyListPick =  list()
for(i in 1:length(AdjacencyList)){
if(covariates$GENOTYPE[i]>=1){
AdjacencyListPick[[length(AdjacencyListPick)+1]] = AdjacencyList[[i]]
}
}
GENOTYPEPick = covariates$GENOTYPE[covariates$GENOTYPE>=1]
SEXPick = covariates$GENDER[covariates$GENOTYPE>=1]
m = length(GENOTYPEPick)
#genotype 1
geno1 = c(1:m)[GENOTYPEPick == 1]
par(mfrow=c(1,2))
for(i in geno1){
img = 1-as.matrix(AdjacencyListPick[[i]])
image(img, col  = gray((0:32)/32),main=i)
}
#genotype 2
geno2 = c(1:m)[GENOTYPEPick == 2]
par(mfrow=c(1,2))
for(i in geno2){
img = 1-as.matrix(AdjacencyListPick[[i]])
image(img, col  = gray((0:32)/32),main=i)
}
Asum = matrix(0, n,n)
for(i in geno1){
Asum = Asum + as.matrix(AdjacencyListPick[[i]])
}
avgGeno1 = Asum/length(geno1)
image.plot(avgGeno1)
Asum = matrix(0, n,n)
for(i in geno2){
Asum = Asum + as.matrix(AdjacencyListPick[[i]])
}
avgGeno2 = Asum/length(geno2)
image.plot(avgGeno2)
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
DegreeListMat = do.call("cbind", DegreeList)
DegreeListPick = DegreeListMat[,covariates$GENOTYPE>=1]
df = data.frame("degree"= c(DegreeListPick), "id"= as.factor(rep(c(1:m),each=n)),"genotype"= as.factor(rep(GENOTYPEPick,each=n)),"sex"=as.factor(rep(SEXPick,each=n)))
ggplot(data=df, aes(degree,fill=id))+ geom_histogram(bins = 30,position = "identity",alpha=0.5)+ theme_bw()+facet_grid(~genotype)
ggplot(data=df, aes(degree,fill=id))+ geom_histogram(bins = 30,position = "identity",alpha=0.5)+ theme_bw()+facet_grid(~sex)
DegreeList<- lapply(graphList, function(x){
betweenness(x)
})
DegreeListMat = do.call("cbind", DegreeList)
DegreeListPick = DegreeListMat[,covariates$GENOTYPE>=1]
df = data.frame("betweenness"= c(DegreeListPick), "id"= as.factor(rep(c(1:m),each=n)),"genotype"= as.factor(rep(GENOTYPEPick,each=n)),"sex"=as.factor(rep(SEXPick,each=n)))
ggplot(data=df, aes(betweenness,fill=id))+ geom_histogram(bins = 30,position = "identity",alpha=0.5)+ theme_bw()+facet_grid(~genotype)
ggplot(data=df, aes(betweenness,fill=id))+ geom_histogram(bins = 30,position = "identity",alpha=0.5)+ theme_bw()+facet_grid(~sex)
left_idx = c(1: (n/2))
right_idx = c((n/2+1):n)
LRSumList = lapply( AdjacencyListPick, function(x){
A = matrix(0,2,2)
A[1,1] = sum(x[left_idx,left_idx])
A[1,2] = sum(x[left_idx,right_idx])
A[2,2] = sum(x[right_idx,right_idx])
A[2,1] = A[1,2]
A
})
z.test2sam = function(a, b, var.a, var.b){
n.a = length(a)
n.b = length(b)
zeta = (mean(a) - mean(b)) / (sqrt(var.a/n.a + var.b/n.b))
return(zeta)
}
total_edges<-sapply(LRSumList, function(x){
sum(x)
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor(GENOTYPEPick),"sex"= as.factor(SEXPick))
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/',
echo=F, warning=FALSE, message=FALSE)
setwd("~/git/subgraph/mgc_based/")
require('igraph')
require('ggplot2')
require('fields')
options(max.print=100)
listGs<- list.files(path = "../graphml/", pattern = "*.graphml")
#read in covariates and graph list
#find those with common ids, sort by id
covariates<- read.csv("../covariates/predictors.csv",stringsAsFactors = F)
ids <- unlist( lapply(listGs,function(x)strtrim(x,6)))
common_id<- intersect(covariates$RUNNO , ids)
covariates <- covariates[covariates$RUNNO%in%common_id,]
covariates <- covariates[order(covariates$RUNNO),]
listGs<- listGs[ids%in%common_id]
listGs<- listGs[order(listGs)]
graphList<- lapply(listGs, function(x){
read.graph( file = paste("../graphml/",x,sep = ""),format = "graphml")
})
AdjacencyList<- lapply(graphList, function(x){
get.adjacency(x)
})
n = nrow(AdjacencyList[[1]])
half = c(1:(n/2))
reordered = c( half*2-1,half*2)
AdjacencyList<- lapply(AdjacencyList, function(x){
x[reordered,reordered]
})
HemisphereList<- lapply(graphList, function(x){
get.vertex.attribute(x,name="hemisphere")
})
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
####
AdjacencyListPick =  list()
for(i in 1:length(AdjacencyList)){
if(covariates$GENOTYPE[i]>=1){
AdjacencyListPick[[length(AdjacencyListPick)+1]] = AdjacencyList[[i]]
}
}
GENOTYPEPick = covariates$GENOTYPE[covariates$GENOTYPE>=1]
SEXPick = covariates$GENDER[covariates$GENOTYPE>=1]
m = length(GENOTYPEPick)
#genotype 1
geno1 = c(1:m)[GENOTYPEPick == 1]
par(mfrow=c(1,2))
for(i in geno1){
img = 1-as.matrix(AdjacencyListPick[[i]])
image(img, col  = gray((0:32)/32),main=i)
}
#genotype 2
geno2 = c(1:m)[GENOTYPEPick == 2]
par(mfrow=c(1,2))
for(i in geno2){
img = 1-as.matrix(AdjacencyListPick[[i]])
image(img, col  = gray((0:32)/32),main=i)
}
Asum = matrix(0, n,n)
for(i in geno1){
Asum = Asum + as.matrix(AdjacencyListPick[[i]])
}
avgGeno1 = Asum/length(geno1)
image.plot(avgGeno1)
Asum = matrix(0, n,n)
for(i in geno2){
Asum = Asum + as.matrix(AdjacencyListPick[[i]])
}
avgGeno2 = Asum/length(geno2)
image.plot(avgGeno2)
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
DegreeListMat = do.call("cbind", DegreeList)
DegreeListPick = DegreeListMat[,covariates$GENOTYPE>=1]
df = data.frame("degree"= c(DegreeListPick), "id"= as.factor(rep(c(1:m),each=n)),"genotype"= as.factor(rep(GENOTYPEPick,each=n)),"sex"=as.factor(rep(SEXPick,each=n)))
ggplot(data=df, aes(degree,fill=id))+ geom_histogram(bins = 30,position = "identity",alpha=0.5)+ theme_bw()+facet_grid(~genotype)
ggplot(data=df, aes(degree,fill=id))+ geom_histogram(bins = 30,position = "identity",alpha=0.5)+ theme_bw()+facet_grid(~sex)
DegreeList<- lapply(graphList, function(x){
betweenness(x)
})
DegreeListMat = do.call("cbind", DegreeList)
DegreeListPick = DegreeListMat[,covariates$GENOTYPE>=1]
df = data.frame("betweenness"= c(DegreeListPick), "id"= as.factor(rep(c(1:m),each=n)),"genotype"= as.factor(rep(GENOTYPEPick,each=n)),"sex"=as.factor(rep(SEXPick,each=n)))
ggplot(data=df, aes(betweenness,fill=id))+ geom_histogram(bins = 30,position = "identity",alpha=0.5)+ theme_bw()+facet_grid(~genotype)
ggplot(data=df, aes(betweenness,fill=id))+ geom_histogram(bins = 30,position = "identity",alpha=0.5)+ theme_bw()+facet_grid(~sex)
left_idx = c(1: (n/2))
right_idx = c((n/2+1):n)
LRSumList = lapply( AdjacencyListPick, function(x){
A = matrix(0,2,2)
A[1,1] = sum(x[left_idx,left_idx])
A[1,2] = sum(x[left_idx,right_idx])
A[2,2] = sum(x[right_idx,right_idx])
A[2,1] = A[1,2]
A
})
z.test2sam = function(a, b, var.a, var.b){
n.a = length(a)
n.b = length(b)
zeta = (mean(a) - mean(b)) / (sqrt(var.a/n.a + var.b/n.b))
return(zeta)
}
total_edges<-sapply(LRSumList, function(x){
sum(x)
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor(GENOTYPEPick),"sex"= as.factor(SEXPick))
n1 = sum(df$genotype==1)
p1 = sum(total_edges[df$genotype==1]) / (n^2) /n1
sigma2.x1 = (n^2/4)*p1*(1-p1)
n2 = sum(df$genotype==2)
p2 = sum(total_edges[df$genotype==2]) / (n^2) /n2
sigma2.x2 = (n^2/4)*p2*(1-p2)
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~sex)
x1 = total_edges[df$sex==1]
x2 = total_edges[df$sex==2]
wilcox.test(x1,x2, alternative = "greater")
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=sex))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~sex)
x1 = total_edges[df$sex==1]
x2 = total_edges[df$sex==2]
wilcox.test(x1,x2, alternative = "greater")
ggplot(data=df, aes(x= 1, y=total_edges,col=sex,group=sex))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~sex)
x1 = total_edges[df$sex==1]
x2 = total_edges[df$sex==2]
wilcox.test(x1,x2, alternative = "greater")
total_edges<-sapply(LRSumList, function(x){
sum(x[1,1])
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor((GENOTYPEPick)), "sex"=as.factor(SEXPick))
# t.test(x1,x2,alternative = "greater")
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
ggplot(data=df, aes(x= 1, y=total_edges,col=sex,group=sex))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~sex)
x1 = total_edges[df$sex==1]
x2 = total_edges[df$sex==2]
wilcox.test(x1,x2, alternative = "greater")
ggplot(data=df, aes(x= 1, y=total_edges,col=sex,group=sex))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~sex)
x1 = total_edges[df$sex==1]
x2 = total_edges[df$sex==2]
wilcox.test(x1,x2, alternative = "equal")
ggplot(data=df, aes(x= 1, y=total_edges,col=sex,group=sex))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~sex)
x1 = total_edges[df$sex==1]
x2 = total_edges[df$sex==2]
wilcox.test(x1,x2, alternative = "two.sided")
ggplot(data=df, aes(x= 1, y=total_edges,col=sex,group=sex))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~sex)
x1 = total_edges[df$sex==1]
x2 = total_edges[df$sex==2]
wilcox.test(x1,x2, alternative = "two.sided")
kruskal.test
?kruskal.test
kruskal.test(df$total_edges,df$sex)
kruskal.test(df$total_edges~as.factor(df$sex))
kruskal.test(df$total_edges~as.factor(df$genotype))
wilcox.test(x1,x2, alternative = "greater")
total_edges<-sapply(LRSumList, function(x){
sum(x[1,2])
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor((GENOTYPEPick)), "sex"=as.factor(SEXPick))
n1 = sum(df$genotype==1)
p1 = sum(total_edges[df$genotype==1]) / (n^2/4) /n1
sigma2.x1 = (n^2/4)*p1*(1-p1)
n2 = sum(df$genotype==2)
p2 = sum(total_edges[df$genotype==2]) / (n^2/4) /n2
sigma2.x2 = (n^2/4)*p2*(1-p2)
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df$total_edges~as.factor(df$genotype))
ggplot(data=df, aes(x= 1, y=total_edges,col=sex,group=sex))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~sex)
x1 = total_edges[df$sex==1]
x2 = total_edges[df$sex==2]
wilcox.test(x1,x2, alternative = "two.sided")
kruskal.test(df$total_edges~as.factor(df$sex))
ggplot(data=df, aes(x= 1, y=total_edges,col=sex,group=sex))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~sex)
x1 = total_edges[df$sex==1]
x2 = total_edges[df$sex==2]
wilcox.test(x1,x2, alternative = "two.sided")
kruskal.test(df$total_edges~as.factor(df$sex))
total_edges<-sapply(LRSumList, function(x){
sum(x)
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor(GENOTYPEPick),"sex"= as.factor(SEXPick))
n1 = sum(df$genotype==1)
p1 = sum(total_edges[df$genotype==1]) / (n^2) /n1
sigma2.x1 = (n^2/4)*p1*(1-p1)
n2 = sum(df$genotype==2)
p2 = sum(total_edges[df$genotype==2]) / (n^2) /n2
sigma2.x2 = (n^2/4)*p2*(1-p2)
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df$total_edges~as.factor(df$genotype))
ggplot(data=df, aes(x= 1, y=total_edges,col=sex,group=sex))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~sex)
x1 = total_edges[df$sex==1]
x2 = total_edges[df$sex==2]
wilcox.test(x1,x2, alternative = "two.sided")
kruskal.test(df$total_edges~as.factor(df$sex))
svd(AdjacencyList[[1]])
svd(AdjacencyList[[1]])$d
eigen(AdjacencyList[[1]])
eigen(AdjacencyList[[1]])$ev
a=eigen(AdjacencyList[[1]])
a$values
eigen(AdjacencyList[[1]])$ev
svd(AdjacencyList[[1]])$d
a$values
plot(a$values,  svd(AdjacencyList[[1]])$d)
plot(a$values
plot(a$values)
plot(AdjacencyList[[1]])$d)
plot(AdjacencyList[[1]]$d)
a$values
min(a$values)
plot(svd(AdjacencyList[[1]])$d)
plot(svd(AdjacencyList[[2]])$d)
plot(svd(AdjacencyList[[3]])$d)
plot(svd(AdjacencyList[[4]])$d)
