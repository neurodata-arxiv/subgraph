z1 = sin(x1/5) + cos(x2/3)
z2 = cos(x1/3) + cos(x2/3+1)
mu = cbind(z1,z2)
z = mu + rnorm(n1*n2*2, sd=0.1)
image.plot(matrix(z[,1],n1,n2))
image.plot(matrix(z[,2],n1,n2))
z1 = sin(x1/5) + cos(x2/3)
z2 = cos(x1/3) + cos(x2/3+2)
mu = cbind(z1,z2)
z = mu + rnorm(n1*n2*2, sd=0.1)
image.plot(matrix(z[,1],n1,n2))
image.plot(matrix(z[,2],n1,n2))
image.plot(matrix(z[,1],n1,n2))
image.plot(matrix(z[,2],n1,n2))
require("fields")
n1 = 30
n2 = 30
x1<- rep(c(1:n1),n2)
x2<- rep(c(1:n2),each=n1)
p=2
z1 = sin(x1/5) + cos(x2/3)
z2 = cos(x1/3) + cos(x2/3+2)
mu = cbind(z1,z2)
z = mu + rnorm(n1*n2*2, sd=0.1)
image.plot(matrix(z[,1],n1,n2))
image.plot(matrix(z[,2],n1,n2))
n1 = 20
n2 = 20
x1<- rep(c(1:n1),n2)
x2<- rep(c(1:n2),each=n1)
p=2
z1 = sin(x1/5) + cos(x2/3)
z2 = cos(x1/3) + cos(x2/3+2)
mu = cbind(z1,z2)
z = mu + rnorm(n1*n2*2, sd=0.1)
fiw <- FIW(z, x1, x2, 0, cov_func = "squared_exp")
fiw<- runMCMC.FIW(fiw,1000,adaptive = TRUE, burnin = TRUE, verbose = F )
n1 = 20
n2 = 20
x1<- rep(c(1:n1),n2)
x2<- rep(c(1:n2),each=n1)
p=2
z1 = sin(x1/5) + cos(x2/3)
z2 = cos(x1/3) + cos(x2/3+2)
mu = cbind(z1,z2)
z = mu + rnorm(n1*n2*2, sd=0.1)
image.plot(matrix(z[,1],n1,n2))
image.plot(matrix(z[,2],n1,n2))
install.packages("nimble")
require("nimble")
pumpCode <- nimbleCode({
for (i in 1:N){
theta[i] ~ dgamma(alpha,beta)
lambda[i] <- theta[i]*t[i]
x[i] ~ dpois(lambda[i])
}
alpha ~ dexp(1.0)
beta ~ dgamma(0.1,1.0)
})
pumpConsts <- list(N = 10,
t = c(94.3, 15.7, 62.9, 126, 5.24,
31.4, 1.05, 1.05, 2.1, 10.5))
pumpData <- list(x = c(5, 1, 5, 14, 3, 19, 1, 1, 4, 22))
pumpInits <- list(alpha = 1, beta = 1,
theta = rep(0.1, pumpConsts$N))
pump <- nimbleModel(code = pumpCode, name = 'pump', constants = pumpConsts,
data = pumpData, inits = pumpInits)
pumpMCMC <- buildMCMC(pump)
Cpump <- compileNimble(pump)
CpumpMCMC <- compileNimble(pumpMCMC, project = pump)
CpumpMCMC$run(10000)
MCMCsamples <- as.matrix(CpumpMCMC$mvSamples)
plot(MCMCsamples[ , 'alpha'], type = 'l', xlab = 'iteration',  ylab = expression(alpha))
plot(MCMCsamples[ , 'beta'], type = 'l', xlab = 'iteration', ylab = expression(beta))
fft
dgp <- nimbleFunction(
run = function(x = double(1), dists = double(2), mu = double(0),
tau = double(0), sigma = double(0), rho = double(0),
log = integer(0, default = 0)) {
returnType(double(0))
C <- sigma^2 * exp(-dists/rho)
p <- length(x)
a = fft(x)
for(i in 1:p)
C[i,i] <- C[i,i] + tau^2
U <- chol(C)
x <- x - mu
tmp <- forwardsolve(t(U), x)
out <- -p*log(2*3.1415926)/2
for(i in 1:p)
out <- out - log(U[i,i]) - 0.5*tmp[i]^2
if(log) return(out) else return(exp(out))
})
pumpMCMC$run(10)
pumpMCMC$run(1000)
warnings()
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='FigROItest/',
echo=T, warning=FALSE, message=T)
setwd("~/git/subgraph/mgc_based/")
require('igraph')
require('ggplot2')
require('fields')
options(max.print=100)
listGs<- list.files(path = "../graphml/", pattern = "*.graphml")
#read in covariates and graph list
#find those with common ids, sort by id
covariates<- read.csv("../covariates/predictors.csv",stringsAsFactors = F)
ids <- unlist( lapply(listGs,function(x)strtrim(x,6)))
common_id<- intersect(covariates$RUNNO , ids)
covariates <- covariates[covariates$RUNNO%in%common_id,]
covariates <- covariates[order(covariates$RUNNO),]
listGs<- listGs[ids%in%common_id]
listGs<- listGs[order(listGs)]
graphList<- lapply(listGs, function(x){
read.graph( file = paste("../graphml/",x,sep = ""),format = "graphml")
})
AdjacencyList<- lapply(graphList, function(x){
get.adjacency(x)
})
n = nrow(AdjacencyList[[1]])
half = c(1:(n/2))
reordered = c( half*2-1,half*2)
TriangleList <-  lapply(graphList, function(x){
a=count_triangles(x)
a[reordered]
})
CluscoeffList<- lapply(graphList, function(x){
a=transitivity(x,"local")
a[reordered]
})
AdjacencyList<- lapply(AdjacencyList, function(x){
x[reordered,reordered]
})
HemisphereList<- lapply(graphList, function(x){
get.vertex.attribute(x,name="hemisphere")
})
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
####
AdjacencyListPick =  list()
TriangleListPick =list()
CluscoeffListPick = list()
for(i in 1:length(AdjacencyList)){
if(covariates$GENOTYPE[i]>=1){
AdjacencyListPick[[length(AdjacencyListPick)+1]] = AdjacencyList[[i]]
TriangleListPick[[length(TriangleListPick)+1]] = TriangleList[[i]]
CluscoeffListPick[[length(CluscoeffListPick)+1]] = CluscoeffList[[i]]
}
}
DegreeListPick<- lapply(AdjacencyListPick, function(x){
rowSums(as.matrix(x))
})
GENOTYPEPick = covariates$GENOTYPE[covariates$GENOTYPE>=1]
SEXPick = covariates$GENDER[covariates$GENOTYPE>=1]
m = length(GENOTYPEPick)
load(file ="omni_embedding.Rda")
require("MASS")
getDecisionBoundary<- function(fit, x1){
mu1 = fit$means[1,]
mu2 = fit$means[2,]
sigma = 1/fit$scaling^2
p1 = fit$prior[1]
p2 = fit$prior[2]
a0 = log(p1/p2) - 0.5* sum((mu1+mu2)*(mu1-mu2)/sigma)
a12 = (mu1-mu2)/sigma
decisionY = (-a0 - a12[1]* X[pick,1])/a12[2]
decisionY
}
X= cbind(df0$x1,df0$x2)
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='FigsOmni/',
echo=T, warning=FALSE, message=T)
setwd("~/git/subgraph/mgc_based/")
require('igraph')
require('ggplot2')
require('fields')
options(max.print=100)
listGs<- list.files(path = "../graphml/", pattern = "*.graphml")
#read in covariates and graph list
#find those with common ids, sort by id
covariates<- read.csv("../covariates/predictors.csv",stringsAsFactors = F)
ids <- unlist( lapply(listGs,function(x)strtrim(x,6)))
common_id<- intersect(covariates$RUNNO , ids)
covariates <- covariates[covariates$RUNNO%in%common_id,]
covariates <- covariates[order(covariates$RUNNO),]
listGs<- listGs[ids%in%common_id]
listGs<- listGs[order(listGs)]
graphList<- lapply(listGs, function(x){
read.graph( file = paste("../graphml/",x,sep = ""),format = "graphml")
})
AdjacencyList<- lapply(graphList, function(x){
get.adjacency(x)
})
n = nrow(AdjacencyList[[1]])
half = c(1:(n/2))
reordered = c( half*2-1,half*2)
AdjacencyList<- lapply(AdjacencyList, function(x){
x[reordered,reordered]
})
HemisphereList<- lapply(graphList, function(x){
get.vertex.attribute(x,name="hemisphere")
})
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
####
AdjacencyListPick =  list()
for(i in 1:length(AdjacencyList)){
if(covariates$GENOTYPE[i]>=1){
AdjacencyListPick[[length(AdjacencyListPick)+1]] = AdjacencyList[[i]]
}
}
GENOTYPEPick = covariates$GENOTYPE[covariates$GENOTYPE>=1]
SEXPick = covariates$GENDER[covariates$GENOTYPE>=1]
m = length(GENOTYPEPick)
ase <- function(A, dim){
if(nrow(A) >= 400){
require(irlba)
A.svd <- irlba(A, nu = dim, nv = dim)
A.svd.values <- A.svd$d[1:dim]
A.svd.vectors <- A.svd$v[,1:dim]
if(dim == 1)
A.coords <- sqrt(A.svd.values) * A.svd.vectors
else
A.coords <- A.svd.vectors %*% diag(sqrt(A.svd.values))
} else{
A.svd <- svd(A)
if(dim == 1)
A.coords <- A.svd$v[,1] * sqrt(A.svd$d[1])
else
A.coords <- A.svd$v[,1:dim] %*% diag(sqrt(A.svd$d[1:dim]))
}
return(list(Xhat=A.coords,scree=A.svd))
}
#
# Alist.log <- lapply(AdjacencyListPick, function(x) log(x + t(x)+1))
# Alist.da <- lapply(Alist.log, function(y) y + diag(x=rowSums(y))/(n-1))
#
# i=1
#
# dhat <- 2
# Tmat <- normT <- matrix(0,m,m)
# pcol1 <- rep(c(1,3),each=n/2)
# pcol2 <- rep(c(2,4),each=n/2)
#
#
# require(Matrix)
# nm = n*m
# # omniA = sparseMatrix(i=1,j=1,x=0, dims=c(nm,nm))
#
# omniA = matrix(0, nm,nm)
# for(i in 1:m) {
#     for(j in 1:i) {
#         Ad <- as.matrix((Alist.da[[i]] + Alist.da[[j]]) / 2)
#         i_idx1 =  n* (i-1)+1
#         i_idx2 = (n* i)
#         j_idx1 =  n* (j-1)+1
#         j_idx2 = (n* j)
#         omniA[i_idx1: i_idx2,j_idx1: j_idx2] = Ad
#         omniA[j_idx1: j_idx2,i_idx1: i_idx2] = t(Ad)
#     }
#   print(i)
# }
#
# dmax <- 2
# Xhat.out <- ase(omniA,dmax)
#
# save(Xhat.out,file ="omni_embedding.Rda")
load(file ="omni_embedding.Rda")
require("ggplot2")
Xhat = Xhat.out$Xhat
df = data.frame( "x1"=Xhat[,1] ,"x2"=Xhat[,2], "id"= as.factor(rep(c(1:m),each=n)),"genotype"= as.factor(rep(GENOTYPEPick,each=n)),"sex"=as.factor(rep(SEXPick,each=n)))
ggplot(df, aes(x=x1, y=x2,col=genotype, group=id)) +  geom_point()
ggplot(df, aes(x=x1, y=x2,col=sex, group=id)) +  geom_point()
Xhat = Xhat.out$Xhat
df0 = data.frame( "x1"=Xhat[,1] ,"x2"=Xhat[,2], "id"= as.factor(rep(c(1:m),each=n)),"genotype"= as.factor(rep(GENOTYPEPick,each=n)),"sex"=as.factor(rep(SEXPick,each=n)), "vertex"= (rep(c(1:n),m)))
df0$genotype.m.x1 = 0
df0$genotype.m.x2 = 0
df0$sex.m.x1 = 0
df0$sex.m.x2 = 0
for(i in 1:n){
for(j in 1:2){
pick = (df0$vertex==i) & (df0$genotype==j)
df0$genotype.m.x1[pick] = median(df0$x1[pick])
df0$genotype.m.x2[pick] = median(df0$x2[pick])
pick = (df0$vertex==i) & (df0$sex==j)
df0$sex.m.x1[pick] = median(df0$x1[pick])
df0$sex.m.x2[pick] = median(df0$x2[pick])
}
}
tot_i = ceiling(n/10)
require("MASS")
getDecisionBoundary<- function(fit, x1){
mu1 = fit$means[1,]
mu2 = fit$means[2,]
sigma = 1/fit$scaling^2
p1 = fit$prior[1]
p2 = fit$prior[2]
a0 = log(p1/p2) - 0.5* sum((mu1+mu2)*(mu1-mu2)/sigma)
a12 = (mu1-mu2)/sigma
decisionY = (-a0 - a12[1]* X[pick,1])/a12[2]
decisionY
}
X= cbind(df0$x1,df0$x2)
df0$decisionX2genotype = 0
df0$decisionX2sex = 0
trim<- function(x,y){
# x[x>(max(y)+0.1)]<-NA
# x[x<(min(y)-0.1)]<-NA
x
}
lda_error = matrix(0, n, 2)
for(i in 1:n){
pick = df0$vertex==i
geno_fit = lda(X[pick,], df$genotype[pick])
geno_error = sum(predict(geno_fit)$class != df$genotype[pick]) / sum(pick)
df0$decisionX2genotype[pick] = trim(getDecisionBoundary(geno_fit, df0$x1[pick]), df0$x2[pick])
sex_fit = lda(X[pick,], df$sex[pick])
sex_error = sum(predict(sex_fit)$class != df$sex[pick]) / sum(pick)
df0$decisionX2sex[pick] = trim(getDecisionBoundary(sex_fit, df0$x1[pick])                                   , df0$x2[pick])
lda_error[i,] = c(geno_error,sex_error)
}
lda_vertex= data.frame("vertex" = c(1:n), "genotype_error" = lda_error[,1], "sex_error" = lda_error[,2])
# genotype.lda.rank = rank(lda_vertex$genotype_error, ties.method = "first")
# sex.lda.rank = rank(lda_vertex$sex_error, ties.method = "first")
# df0$genotype.lda.rank = rep(genotype.lda.rank, m)
# df0$sex.lda.rank = rep(sex.lda.rank, m)
df0$decisionX2genotype
omni_lda = df0
save(omni_lda,"omni_lda.RDa")
save(omni_lda,file="omni_lda.RDa")
load(file ="omni_lda.RDa")
pick = omni_lda$vertex == 1
df = omni_lda[pick,]
print(ggplot(df) +  geom_point(aes(x=x1, y=x2,col=genotype, group=id)) +
# geom_point(aes(x=genotype.m.x1, y=genotype.m.x2,shape=genotype),alpha=0.5) +
geom_line(aes(x=x1, y=decisionX2genotype), linetype=2) +
facet_wrap(~vertex, ncol=5,scales="free"))
pick = omni_lda$vertex == 2
df = omni_lda[pick,]
print(ggplot(df) +  geom_point(aes(x=x1, y=x2,col=genotype, group=id)) +
# geom_point(aes(x=genotype.m.x1, y=genotype.m.x2,shape=genotype),alpha=0.5) +
geom_line(aes(x=x1, y=decisionX2genotype), linetype=2) +
facet_wrap(~vertex, ncol=5,scales="free"))
pick = omni_lda$vertex == 111
df = omni_lda[pick,]
print(ggplot(df) +  geom_point(aes(x=x1, y=x2,col=genotype, group=id)) +
# geom_point(aes(x=genotype.m.x1, y=genotype.m.x2,shape=genotype),alpha=0.5) +
geom_line(aes(x=x1, y=decisionX2genotype), linetype=2) +
facet_wrap(~vertex, ncol=5,scales="free"))
plotOmni(idx){
plotOmni<- function(idx){
pick = omni_lda$vertex %in% idx
df = omni_lda[pick,]
print(ggplot(df) +  geom_point(aes(x=x1, y=x2,col=genotype, group=id)) +
geom_line(aes(x=x1, y=decisionX2genotype), linetype=2) +
facet_wrap(~vertex, ncol=5,scales="free"))
}
pick2
list_regions<- c(63,52,60,62,164,166, 121,123,74,158,92,93,94,95,96)
list_regions + n
n/2
list_regions = c(list_regions, list_regions + n/2)
list_regions<- c(63,52,60,62,164,166, 121,123,74,158,92,93,94,95,96)
list_regions = c(list_regions, list_regions + n/2)
plotOmni(list_regions)
load(file ="omni_lda.RDa")
plotOmni<- function(idx){
pick = omni_lda$vertex %in% idx
df = omni_lda[pick,]
df$vertex = factor(df$vertex, levels=idx)
print(ggplot(df) +  geom_point(aes(x=x1, y=x2,col=genotype, group=id)) +
geom_line(aes(x=x1, y=decisionX2genotype), linetype=2) +
facet_wrap(~vertex, ncol=5,scales="free"))
}
list_regions<- c(63,52,60,62,164,166, 121,123,74,158,92,93,94,95,96)
list_regions = c(list_regions, list_regions + n/2)
plotOmni(list_regions)
list_regions<- c(63,52,60,62,164,166, 121,123,74,158,92,93,94,95,96)
list_regions = c(list_regions)
plotOmni(list_regions)
lda_vertex$genotype_error
lda_vertex$genotype_error[list_regions]
lda_vertex$genotype_error[c(60,62,164,166)]
plotOmni(list_regions)
list_regions<- c(63,52,60,62,164,166, 121,123,74,158,92,93,94,95,96)
list_regions = c(list_regions)
lda_vertex$genotype_error[c(60,62,164,166)]
plotOmni(c(60,62,164,166))
load(file ="omni_lda.RDa")
plotOmni<- function(idx){
pick = omni_lda$vertex %in% idx
df = omni_lda[pick,]
df$vertex = factor(df$vertex, levels=idx)
print(ggplot(df) +  geom_point(aes(x=x1, y=x2,col=genotype, group=id)) +
# geom_line(aes(x=x1, y=decisionX2genotype), linetype=2) +
facet_wrap(~vertex, ncol=5,scales="free"))
}
list_regions<- c(63,52,60,62,164,166, 121,123,74,158,92,93,94,95,96)
list_regions = c(list_regions)
lda_vertex$genotype_error[c(60,62,164,166)]
plotOmni(c(60,62,164,166))
lda_vertex$genotype_error
save(lda_vertex,file="lda_vertex_error.RDa")
load("lda_vertex_error.RDa")
list_regions<- c(63,52,60,62,164,166, 121,123,74,158,92,93,94,95,96)
list_regions = c(list_regions)
plotOmni(c(60,62,164,166))
load("lda_vertex_error.RDa")
print(lda_vertex$genotype_error)
print(lda_vertex$genotype_error[c(60,62,164,166)])
list_regions<- c(63,52,60,62,164,166, 121,123,74,158,92,93,94,95,96)
list_regions = c(list_regions)
plotOmni(c(60,62,164,166))
load("lda_vertex_error.RDa")
print(lda_vertex$genotype_error[c(60,62,164,166)])
list_regions<- c(63,52,60,62,164,166, 121,123,74,158,92,93,94,95,96)
list_regions = c(list_regions)
plotOmni(c(60,62,164,166)+ n/2)
load("lda_vertex_error.RDa")
print(lda_vertex$genotype_error[c(60,62,164,166)+ n/2])
list_regions<- c(63,52,60,62,164,166, 121,123,74,158,92,93,94,95,96)
list_regions = c(list_regions)
plotOmni(c(60,62,164,166)+ n/2)
load("lda_vertex_error.RDa")
print(lda_vertex$genotype_error[c(60,62,164,166)+ n/2])
setwd("~/git/subgraph/mgc_based/")
spatialCoor = read.csv("../covariates/spatial_coord.csv",stringsAsFactors = F)
coord<- cbind(spatialCoor$x_caudaL_rostral,spatialCoor$y_Right_left,spatialCoor$z_infgerior_superior)
#read in graphs
require('igraph')
require('ggplot2')
require('fields')
options(max.print=100)
listGs<- list.files(path = "../graphml/", pattern = "*.graphml")
#read in covariates and graph list
#find those with common ids, sort by id
covariates<- read.csv("../covariates/predictors.csv",stringsAsFactors = F)
ids <- unlist( lapply(listGs,function(x)strtrim(x,6)))
common_id<- intersect(covariates$RUNNO , ids)
covariates <- covariates[covariates$RUNNO%in%common_id,]
covariates <- covariates[order(covariates$RUNNO),]
listGs<- listGs[ids%in%common_id]
listGs<- listGs[order(listGs)]
graphList<- lapply(listGs, function(x){
read.graph( file = paste("../graphml/",x,sep = ""),format = "graphml")
})
AdjacencyList<- lapply(graphList, function(x){
get.adjacency(x)
})
n = nrow(AdjacencyList[[1]])
half = c(1:(n/2))
reordered = c( half*2-1,half*2)
TriangleList <-  lapply(graphList, function(x){
a=count_triangles(x)
a[reordered]
})
CluscoeffList<- lapply(graphList, function(x){
a=transitivity(x,"local")
a[reordered]
})
AdjacencyList<- lapply(AdjacencyList, function(x){
x[reordered,reordered]
})
HemisphereList<- lapply(graphList, function(x){
get.vertex.attribute(x,name="hemisphere")
})
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
####
AdjacencyListPick =  list()
TriangleListPick =list()
CluscoeffListPick = list()
for(i in 1:length(AdjacencyList)){
if(covariates$GENOTYPE[i]>=1){
AdjacencyListPick[[length(AdjacencyListPick)+1]] = AdjacencyList[[i]]
TriangleListPick[[length(TriangleListPick)+1]] = TriangleList[[i]]
CluscoeffListPick[[length(CluscoeffListPick)+1]] = CluscoeffList[[i]]
}
}
DegreeListPick<- lapply(AdjacencyListPick, function(x){
rowSums(as.matrix(x))
})
GENOTYPEPick = covariates$GENOTYPE[covariates$GENOTYPE>=1]
SEXPick = covariates$GENDER[covariates$GENOTYPE>=1]
m = length(GENOTYPEPick)
require("TensorEmbedding")
flat_y<- unlist(lapply(AdjacencyListPick,function(x) c(as.matrix(x))))
y = array(flat_y, dim=c(n,n,m))
testObj<- TensorEmbedding::symmetric_tensor_decomp_cov(A,coord,n,m, 3, 500, 1E-3, 1E-3)
testObj<- TensorEmbedding::symmetric_tensor_decomp_cov(y,coord,n,m, 3, 500, 1E-3, 1E-3)
testObj<- TensorEmbedding::symmetric_tensor_decomp_cov(y,coord,n,m, k=3, 500,lam = 10,delta1 = 1E-3,delta2 = 1E-3)
coord
testObj<- TensorEmbedding::symmetric_tensor_decomp_cov(y,coord,n,m, k=3, 500,lam = 100,delta1 = 1E-3,delta2 = 1E-3)
save(testObj,file="cov_embedding.RDa")
testObj$C
testObj$L
X
coord
plot(testObj$L[,1],testObj$L[,2])
plot(coord[,1],coord[,2])
plot(testObj$L[,1],testObj$L[,2])
plot(coord[,1],coord[,2])
plot(testObj$C)
plot(testObj$C[,1])
testObj$C
testObj<- TensorEmbedding::symmetric_tensor_decomp_cov(y,coord,n,m, k=3, 500,lam = 0.1,delta1 = 1E-3,delta2 = 1E-3)
testObj<- TensorEmbedding::symmetric_tensor_decomp_cov(y,coord,n,m, k=3, 10,lam = 0.1,delta1 = 1E-3,delta2 = 1E-3)
plot(testObj$L[,1],testObj$L[,2])
plot(testObj$L[,1],testObj$L[,2])
plot(coord[,1],coord[,2])
