ids <- unlist( lapply(listGs,function(x)strtrim(x,6)))
common_id<- intersect(covariates$RUNNO , ids)
covariates <- covariates[covariates$RUNNO%in%common_id,]
covariates <- covariates[order(covariates$RUNNO),]
listGs<- listGs[ids%in%common_id]
listGs<- listGs[order(listGs)]
graphList<- lapply(listGs, function(x){
read.graph( file = paste("../graphml/",x,sep = ""),format = "graphml")
})
AdjacencyList<- lapply(graphList, function(x){
get.adjacency(x)
})
n = nrow(AdjacencyList[[1]])
half = c(1:(n/2))
reordered = c( half*2-1,half*2)
AdjacencyList<- lapply(AdjacencyList, function(x){
x[reordered,reordered]
})
HemisphereList<- lapply(graphList, function(x){
get.vertex.attribute(x,name="hemisphere")
})
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
####
AdjacencyListPick =  list()
for(i in 1:length(AdjacencyList)){
if(covariates$GENOTYPE[i]>=1){
AdjacencyListPick[[length(AdjacencyListPick)+1]] = AdjacencyList[[i]]
}
}
GENOTYPEPick = covariates$GENOTYPE[covariates$GENOTYPE>=1]
SEXPick = covariates$GENDER[covariates$GENOTYPE>=1]
m = length(GENOTYPEPick)
m
source("stiefel_diagonalize.r")
r=30
AdjacencyListPick = lapply(AdjacencyListPick, function(x){as.matrix(x)})
stiefelDecomp = stiefel_diagonalize(AdjacencyListPick, r)
AdjacencyListPick
AdjacencyListPick[[1]]
c(AdjacencyListPick[[1]])
AdjacencyListPick = lapply(AdjacencyListPick, function(x){as.matrix(x)})
r=10
AdjacencyListPick = lapply(AdjacencyListPick, function(x){as.matrix(x)})
stiefelDecomp = stiefel_diagonalize(AdjacencyListPick, r)
setwd("~/git/subgraph/mgc_based/")
Y_list=AdjacencyListPick
r=10
diagD=T
n = nrow(Y_list[[1]])
m = length(Y_list)
m
n
ub_list = list()
lb_list = list()
for (j in 1:m)
{
mat_ub = matrix(Inf, n, n)
mat_lb = matrix( - Inf, n, n)
mat_lb[Y_list[[j]] == 1] = 0
mat_ub[Y_list[[j]] == 0] = 0
ub_list[[j]] = mat_ub
lb_list[[j]] = mat_lb
}
tau = 100
avgZ = matrix(rowMeans(matrix(unlist(Y_list), n * n)), n)
diag(avgZ) = 0.99
avgZ[avgZ == 1] = 0.99
avgZ[avgZ == 0] = 0.01
svd1 <- svd(qnorm(avgZ), nu = r, nv = r)
U0 <- svd1$u
zeroB <- matrix(0, r, r)
zeroA <- matrix(0, n, n)
k = 1
U_list = list()
for (j in 1:m)
{
U_list[[j]] = rbmf.matrix.gibbs(zeroA, zeroB, k * U0, U0)
}
Z_list = list()
for (j in 1:m)
{
Z_list[[j]] = Y_list[[j]] - 0.5
}
trace_D <- numeric()
D_list = list()
for (j in 1:m)
{
# vinvm = apply(U_list[[j]], 2, function(x){  sum(x* (Z_list[[j]]%*%x))/2})
if (diagD)
{
vinvm = apply(U0, 2, function(x) { sum(x * (Z_list[[j]] %*% x)) / 2 })
v = 2 * tau / (2 + tau)
mean_D = v * vinvm
D_list[[j]] = diag(rnorm(r, mean_D, sqrt(v)))
} else
{
matD = matrix(0, r, r)
mat_lowertri_idx = lower.tri(matD)
vinvm = (t(U0) %*% Z_list[[j]] %*% U0)
diag(vinvm) = diag(vinvm) / 2
vij = 1 * tau / (1 + tau)
mean_Dij = vij * vinvm
matD[mat_lowertri_idx] = rnorm(sum(mat_lowertri_idx), mean_Dij[mat_lowertri_idx], sqrt(vij))
matD = symmetrize(matD)
vii = 2 * tau / (2 + tau)
mean_Ddiag = vii * diag(vinvm)
diag(matD) = rnorm(r, mean_Ddiag, sqrt(vii))
D_list[[j]] = matD
}
}
warnings()
diagD
diagD
T
source('~/git/subgraph/mgc_based/stiefel_diagonalize.r')
AdjacencyListPick = lapply(AdjacencyListPick, function(x){as.matrix(x)})
stiefelDecomp = stiefel_diagonalize(AdjacencyListPick, r)
save(stiefelDecomp, file="embedding.Rda")
load(file= "embedding.Rda")
Dlist = sapply(stiefelDecomp$D_list,function(x){
diag(x)
})
D = t(Dlist)
require("GGally")
df = data.frame(as.data.frame(D[,1:10]), "genotype"=as.factor(GENOTYPEPick))
ggpairs(df, aes(colour = genotype, alpha = 0.4))
kw_test_vec = numeric(10)
for(i in 1:10){
kw_test = kruskal.test(D[,i]~as.factor(df$genotype))
kw_test_vec[i]=kw_test$p.value
}
plot(kw_test_vec, ylim=c(0,1))
abline(h=0.05)
wilcoxon_test_vec = numeric(10)
for(i in 1:10){
x1 = D[df$genotype==1,i]
x2 = D[df$genotype==2,i]
wc_test = wilcox.test(x1,x2, alternative = "two.sided")
wilcoxon_test_vec[i]=wc_test$p.value
}
plot(wilcoxon_test_vec, ylim=c(0,1))
abline(h=0.05)
df = data.frame(as.data.frame(D[,1:10]), "sex"=as.factor(SEXPick))
ggpairs(df, aes(colour = sex, alpha = 0.4))
U = stiefelDecomp$U0[,1:10]
df = data.frame("idx"=c(1:n),"h"=c(U),"dim"=as.factor(rep(c(1:10),each=n)))
ggplot(data=df) + geom_line(aes(x=idx,y=h))+facet_wrap(~dim,scale="free") +
theme(axis.title=element_blank(),
axis.text.y = element_blank(), axis.ticks = element_blank()) +
theme(strip.text.y = element_text(angle = 0, vjust=0.2, hjust=0)) +
theme(axis.title=element_blank(),
axis.text.x = element_blank(), axis.ticks = element_blank()) +
theme(strip.text.x = element_text(angle = 0, vjust=0.2, hjust=0))
image.plot(U[,1]%*%t(U[,1]))
image.plot(U[,2]%*%t(U[,2]))
image.plot(U[,3]%*%t(U[,3]))
image.plot(U[,4]%*%t(U[,4]))
D1 = D[,c(1:10)]
T= matrix(0,m,m)
for(i in 1:m){
for(j in 1:i){
T[i,j] = norm(D1[i,]-D1[j,])
T[j,i] = T[i,j]
}
}
require(reshape)
require(plyr)
orderByGenotype = order(GENOTYPEPick)
cut = sum(GENOTYPEPick[orderByGenotype] ==1) + 0.5
T1 = T[orderByGenotype,orderByGenotype]
# T1[16,]<-NA
# T1[,16]<-NA
T.m = melt(T1)
ggplot(T.m, aes(X1, X2)) + geom_tile(aes(fill = value),
colour = "blue") + scale_fill_gradient2(low = "blue",mid="white",
high = "red") + geom_vline(xintercept=cut) + geom_hline(yintercept=cut)
T1 = T[orderByGenotype,orderByGenotype]
T1[12,]<-NA
T1[,12]<-NA
T.m = melt(T1)
ggplot(T.m, aes(X1, X2)) + geom_tile(aes(fill = value),
colour = "blue") + scale_fill_gradient2(low = "blue",mid="white",
high = "red") + geom_vline(xintercept=cut) + geom_hline(yintercept=cut)
require(reshape)
require(plyr)
orderBySex = order(SEXPick)
cut = sum(SEXPick[orderBySex] ==1) + 0.5
T1 = T[orderBySex,orderBySex]
# T1[16,]<-NA
# T1[,16]<-NA
T.m = melt(T1)
ggplot(T.m, aes(X1, X2)) + geom_tile(aes(fill = value),
colour = "blue") + scale_fill_gradient2(low = "blue",mid="white",
high = "red") + geom_vline(xintercept=cut) + geom_hline(yintercept=cut)
T1 = T[orderBySex,orderBySex]
T1[5,]<-NA
T1[,5]<-NA
T.m = melt(T1)
ggplot(T.m, aes(X1, X2)) + geom_tile(aes(fill = value),
colour = "blue") + scale_fill_gradient2(low = "blue",mid="white",
high = "red") + geom_vline(xintercept=cut) + geom_hline(yintercept=cut)
image.plot(U[,5]%*%t(U[,5]))
image.plot(U[,6]%*%t(U[,6]))
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='FigsReport/',
echo=F, warning=FALSE, message=F)
setwd("~/git/subgraph/mgc_based/")
require('igraph')
require('ggplot2')
require('fields')
options(max.print=100)
listGs<- list.files(path = "../graphml/", pattern = "*.graphml")
#read in covariates and graph list
#find those with common ids, sort by id
covariates<- read.csv("../covariates/predictors.csv",stringsAsFactors = F)
ids <- unlist( lapply(listGs,function(x)strtrim(x,6)))
common_id<- intersect(covariates$RUNNO , ids)
covariates <- covariates[covariates$RUNNO%in%common_id,]
covariates <- covariates[order(covariates$RUNNO),]
listGs<- listGs[ids%in%common_id]
listGs<- listGs[order(listGs)]
graphList<- lapply(listGs, function(x){
read.graph( file = paste("../graphml/",x,sep = ""),format = "graphml")
})
AdjacencyList<- lapply(graphList, function(x){
get.adjacency(x)
})
n = nrow(AdjacencyList[[1]])
half = c(1:(n/2))
reordered = c( half*2-1,half*2)
TriangleList <-  lapply(graphList, function(x){
a=count_triangles(x)
a[reordered]
})
CluscoeffList<- lapply(graphList, function(x){
a=transitivity(x,"local")
a[reordered]
})
AdjacencyList<- lapply(AdjacencyList, function(x){
x[reordered,reordered]
})
HemisphereList<- lapply(graphList, function(x){
get.vertex.attribute(x,name="hemisphere")
})
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
####
AdjacencyListPick =  list()
TriangleListPick =list()
CluscoeffListPick = list()
for(i in 1:length(AdjacencyList)){
if(covariates$GENOTYPE[i]>=1){
AdjacencyListPick[[length(AdjacencyListPick)+1]] = AdjacencyList[[i]]
TriangleListPick[[length(TriangleListPick)+1]] = TriangleList[[i]]
CluscoeffListPick[[length(CluscoeffListPick)+1]] = CluscoeffList[[i]]
}
}
DegreeListPick<- lapply(AdjacencyListPick, function(x){
rowSums(as.matrix(x))
})
GENOTYPEPick = covariates$GENOTYPE[covariates$GENOTYPE>=1]
SEXPick = covariates$GENDER[covariates$GENOTYPE>=1]
m = length(GENOTYPEPick)
left_idx = c(1: (n/2))
right_idx = c((n/2+1):n)
LRSumList = lapply( AdjacencyListPick, function(x){
A = matrix(0,2,2)
A[1,1] = sum(x[left_idx,left_idx])
A[1,2] = sum(x[left_idx,right_idx])
A[2,2] = sum(x[right_idx,right_idx])
A[2,1] = A[1,2]
A
})
total_edges<-sapply(LRSumList, function(x){
sum(x)
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor(GENOTYPEPick),"sex"= as.factor(SEXPick))
n1 = sum(df$genotype==1)
n2 = sum(df$genotype==2)
m
nrow(df)
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df$total_edges~as.factor(df$genotype))
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df$total_edges~as.factor(df$genotype))
ggplot(data=df, aes(x= 1, y=total_edges,col=sex,group=sex))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~sex)
x1 = total_edges[df$sex==1]
x2 = total_edges[df$sex==2]
wilcox.test(x1,x2, alternative = "two.sided")
kruskal.test(df$total_edges~as.factor(df$sex))
ggplot(data=df, aes(x= 1, y=total_edges,col=sex,group=sex))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5, notch = T)+facet_grid(~sex)
T
rm(T)
ggplot(data=df, aes(x= 1, y=total_edges,col=sex,group=sex))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5, notch = T)+facet_grid(~sex)
ggplot(data=df, aes(x= 1, y=total_edges,col=sex,group=sex))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5, notch = T,notchwidth=0.1)+facet_grid(~sex)
ggplot(data=df, aes(x= 1, y=total_edges,col=sex,group=sex))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5, notch = T,notchwidth=0.05)+facet_grid(~sex)
ggplot(data=df, aes(x= 1, y=total_edges,col=sex,group=sex))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5, notch = T,notchwidth=0.9)+facet_grid(~sex)
ggplot(data=df, aes(x= 1, y=total_edges,col=sex,group=sex))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~sex)
total_edges<-sapply(LRSumList, function(x){
sum(x[1,2])
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor((GENOTYPEPick)), "sex"=as.factor(SEXPick))
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df$total_edges~as.factor(df$genotype))
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df$total_edges~as.factor(df$genotype))
total_edges<-sapply(LRSumList, function(x){
sum(x[1,2])
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor((GENOTYPEPick)), "sex"=as.factor(SEXPick))
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df$total_edges~as.factor(df$genotype))
LRSumList
total_edges<-sapply(LRSumList, function(x){
sum(x)
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor(GENOTYPEPick),"sex"= as.factor(SEXPick))
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df$total_edges~as.factor(df$genotype))
total_edges<-sapply(LRSumList, function(x){
sum(x[1,1])
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor((GENOTYPEPick)), "sex"=as.factor(SEXPick))
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df$total_edges~as.factor(df$genotype))
total_edges<-sapply(LRSumList, function(x){
sum(x[2,2])
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor((GENOTYPEPick)), "sex"=as.factor(SEXPick))
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df$total_edges~as.factor(df$genotype))
total_edges<-sapply(LRSumList, function(x){
sum(x[1,1])
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor((GENOTYPEPick)), "sex"=as.factor(SEXPick))
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df$total_edges~as.factor(df$genotype))
total_edges<-sapply(LRSumList, function(x){
sum(x[1,1])
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor((GENOTYPEPick)), "sex"=as.factor(SEXPick))
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df$total_edges~as.factor(df$genotype))
total_edges<-sapply(LRSumList, function(x){
sum(x)
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor(GENOTYPEPick),"sex"= as.factor(SEXPick))
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df$total_edges~as.factor(df$genotype))
total_edges<-sapply(LRSumList, function(x){
sum(x[1,1])
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor((GENOTYPEPick)), "sex"=as.factor(SEXPick))
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df$total_edges~as.factor(df$genotype))
total_edges<-sapply(LRSumList, function(x){
sum(x[1,2])
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor((GENOTYPEPick)), "sex"=as.factor(SEXPick))
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df$total_edges~as.factor(df$genotype))
LRSumList
total_edges<-sapply(LRSumList, function(x){
(x[1,1])
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor((GENOTYPEPick)), "sex"=as.factor(SEXPick))
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df$total_edges~as.factor(df$genotype))
total_edges<-sapply(LRSumList, function(x){
(x[2,2])
})
df = data.frame("total_edges"= c(total_edges), "id"= as.factor((c(1:m))),"genotype"= as.factor((GENOTYPEPick)), "sex"=as.factor(SEXPick))
ggplot(data=df, aes(x= 1, y=total_edges,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = total_edges[df$genotype==1]
x2 = total_edges[df$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df$total_edges~as.factor(df$genotype))
ggplot(data=df, aes(x= 1, y=total_edges,col=sex,group=sex))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~sex)
x1 = total_edges[df$sex==1]
x2 = total_edges[df$sex==2]
wilcox.test(x1,x2, alternative = "two.sided")
kruskal.test(df$total_edges~as.factor(df$sex))
load(file= "embedding.Rda")
Dlist = sapply(stiefelDecomp$D_list,function(x){
diag(x)
})
D = t(Dlist)
U = stiefelDecomp$U0[,1:10]
df = data.frame("idx"=c(1:n),"h"=c(U),"dim"=as.factor(rep(c(1:10),each=n)))
ggplot(data=df) + geom_line(aes(x=idx,y=h))+facet_wrap(~dim,scale="free") +
theme(axis.title=element_blank(),
axis.text.y = element_blank(), axis.ticks = element_blank()) +
theme(strip.text.y = element_text(angle = 0, vjust=0.2, hjust=0)) +
theme(axis.title=element_blank(),
axis.text.x = element_blank(), axis.ticks = element_blank()) +
theme(strip.text.x = element_text(angle = 0, vjust=0.2, hjust=0))
par(mfrow=c(1,2))
image.plot(U[,6]%*%t(U[,6]))
km6 = kmeans(U[,6],centers = 3)
U6fitted = km6$centers[km6$cluster]
U6fitted2 = U6fitted %*%t(U6fitted)
image.plot(U6fitted2)
par(mfrow=c(1,2))
image.plot(U[,2]%*%t(U[,2]))
km6 = kmeans(U[,6],centers = 3)
U6fitted = km6$centers[km6$cluster]
U6fitted2 = U6fitted %*%t(U6fitted)
image.plot(U6fitted2)
par(mfrow=c(1,2))
image.plot(U[,2]%*%t(U[,2]))
km6 = kmeans(U[,2],centers = 3)
U6fitted = km6$centers[km6$cluster]
U6fitted2 = U6fitted %*%t(U6fitted)
image.plot(U6fitted2)
par(mfrow=c(1,2))
image.plot(U[,2]%*%t(U[,2]))
km6 = kmeans(U[,2],centers = 2)
U6fitted = km6$centers[km6$cluster]
U6fitted2 = U6fitted %*%t(U6fitted)
image.plot(U6fitted2)
par(mfrow=c(1,2))
image.plot(U[,2]%*%t(U[,2]))
km6 = kmeans(U[,2],centers = 2)
U6fitted = km6$centers[km6$cluster]
U6fitted2 = U6fitted %*%t(U6fitted)
image.plot(U6fitted2)
par(mfrow=c(1,2))
for(i in 1:10)
{
image.plot(U[,i]%*%t(U[,i]))
km6 = kmeans(U[,i],centers = 2)
U6fitted = km6$centers[km6$cluster]
U6fitted2 = U6fitted %*%t(U6fitted)
image.plot(U6fitted2)
}
load(file ="omni_embedding.Rda")
Xhat = Xhat.out$Xhat
df0 = data.frame( "x1"=Xhat[,1] ,"x2"=Xhat[,2], "id"= as.factor(rep(c(1:m),each=n)),"genotype"= as.factor(rep(GENOTYPEPick,each=n)),"sex"=as.factor(rep(SEXPick,each=n)), "vertex"= (rep(c(1:n),m)))
df1 = df0[df0$vertex %in% c(111, 277),]
ggplot(df1, aes(x=x1, y=x2,col=genotype)) +  geom_point() + facet_wrap(~vertex)
load(file ="omni_embedding.Rda")
Xhat = Xhat.out$Xhat
df0 = data.frame( "x1"=Xhat[,1] ,"x2"=Xhat[,2], "id"= as.factor(rep(c(1:m),each=n)),"genotype"= as.factor(rep(GENOTYPEPick,each=n)),"sex"=as.factor(rep(SEXPick,each=n)), "vertex"= (rep(c(1:n),m)))
df1 = df0[df0$vertex %in% c(111, 277),]
ggplot(df1, aes(x=x1, y=x2,col=genotype)) +  geom_point() + facet_wrap(~vertex)
load(file ="omni_embedding.Rda")
Xhat = Xhat.out$Xhat
df0 = data.frame( "x1"=Xhat[,1] ,"x2"=Xhat[,2], "id"= as.factor(rep(c(1:m),each=n)),"genotype"= as.factor(rep(GENOTYPEPick,each=n)),"sex"=as.factor(rep(SEXPick,each=n)), "vertex"= (rep(c(1:n),m)))
df1 = df0[df0$vertex %in% c(111, 277),]
ggplot(df1, aes(x=x1, y=x2,col=genotype)) +  geom_point() + facet_wrap(~vertex)
degree111 = sapply(DegreeListPick, function(x)x[111])
df1 = data.frame( "degree" =  degree111, "genotype" = as.factor(GENOTYPEPick), "sex" = SEXPick)
ggplot(data=df1, aes(x= 1, y=degree,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = df1$degree[df1$genotype ==1]
x2 = df1$degree[df1$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df1$degree~as.factor(df1$genotype))
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df1$degree~as.factor(df1$genotype))
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df1$degree~as.factor(df1$genotype))
degree111 = sapply(DegreeListPick, function(x)x[53])
df1 = data.frame( "degree" =  degree111, "genotype" = as.factor(GENOTYPEPick), "sex" = SEXPick)
ggplot(data=df1, aes(x= 1, y=degree,col=genotype,group=genotype))+ geom_point()+geom_jitter()+geom_boxplot(alpha=0.5)+facet_grid(~genotype)
x1 = df1$degree[df1$genotype ==1]
x2 = df1$degree[df1$genotype==2]
wilcox.test(x1,x2, alternative = "greater")
kruskal.test(df1$degree~as.factor(df1$genotype))
